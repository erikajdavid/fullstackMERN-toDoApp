{"ast":null,"code":"var _jsxFileName = \"/Users/erikadavid/Desktop/MERN-toDoApp/client/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    async function getTodos() {\n      try {\n        const res = await fetch(\"/api/todos\");\n        if (!res.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const todos = await res.json();\n        setTodos(todos);\n      } catch (error) {\n        console.error(\"Error fetching todos:\", error);\n      }\n    }\n    getTodos();\n  }, []);\n\n  //keeping the dependency array empty means it's only going to run one time. \n  //we only want to get our todos one time. \n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello World!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), todos.length > 0 && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(todos, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","App","_s","todos","setTodos","getTodos","res","fetch","ok","Error","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/erikadavid/Desktop/MERN-toDoApp/client/src/App.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nfunction App() {\n\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    async function getTodos() {\n      try {\n        const res = await fetch(\"/api/todos\");\n        if (!res.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const todos = await res.json();\n        setTodos(todos);\n\n      } catch (error) {\n        console.error(\"Error fetching todos:\", error);\n      }\n    }\n  \n    getTodos();\n  }, []);\n  \n  \n  //keeping the dependency array empty means it's only going to run one time. \n  //we only want to get our todos one time. \n\n  return (\n    <main className=\"container\">\n      <h1>Hello World!</h1>\n      {(todos.length > 0) && <pre>{JSON.stringify(todos, null, 2)}</pre>}\n    </main>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,eAAeQ,QAAQA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;QACrC,IAAI,CAACD,GAAG,CAACE,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMN,KAAK,GAAG,MAAMG,GAAG,CAACI,IAAI,CAAC,CAAC;QAC9BN,QAAQ,CAACD,KAAK,CAAC;MAEjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF;IAEAN,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA;;EAEA,oBACEL,OAAA;IAAMa,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACzBd,OAAA;MAAAc,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBf,KAAK,CAACgB,MAAM,GAAG,CAAC,iBAAKnB,OAAA;MAAAc,QAAA,EAAMM,IAAI,CAACC,SAAS,CAAClB,KAAK,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9D,CAAC;AAEX;AAAChB,EAAA,CAhCQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}